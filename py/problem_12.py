"""
The sequence of number_triangle numbers is generated by adding the natural numbers.
So the 7th number_triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven number_triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    36: 1,2,3,4,6,9,12,18,36
    45: 1,3,5,9,15,45
    55: 1,5,11,55



We can see that 28 is the first number_triangle number to have over five divisors.

What is the value of the first number_triangle number to have over five hundred divisors?
"""
from Integer import Integer

i = 1
triangle_number = i
number_divisors = 0
while number_divisors < 500:
    i += 1
    triangle_number += i
    number_divisors = len(Integer(triangle_number).divisors())
    print(f"Triangle number: {triangle_number}, number of divisors: {number_divisors}")
